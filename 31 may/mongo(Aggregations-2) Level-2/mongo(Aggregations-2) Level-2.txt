Problem Statements

1. Write Mongo query to retrieve documents from the orders in ascending order by total.

ANS:db.orders.find().sort({ total: 1 })


2. Write Mongo query to retrieve the oldest paymentMethod from the payments collection as "_id".


ANS:db.payments.find().sort({ payment_date: 1 }).limit(1).project({ _id: "$paymentMethod" })


3. Write Mongo query to retrieve the recent paymentMethod from the payments collection as "_id".

ANS:db.payments.find().sort({ payment_date: -1 }).limit(1).project({ _id: "$paymentMethod" })


4. Write Mongo query to retrieve 2nd and 3rd buyers from the buyers collection.

ANS:db.buyers.find().skip(1).limit(2)


5. Write Mongo query to retrieve the less Expensive product from order_details.

ANS:db.order_details.find().sort({ price: 1 }).limit(1)


6. Write Mongo query to retrieve the most Expensive product from order_details.

ANS:db.order_details.find().sort({ price: -1 }).limit(1)


7. Write Mongo query to retrieve the first order from the orders as per the order_date.

ANS:db.orders.find().sort({ order_date: 1 }).limit(1)


8. Write Mongo query to retrieve the last 3 orders from the orders collection who have less total amount.

ANS:db.orders.find().sort({ total: 1 }).limit(3).sort({ total: -1 })



9. Write Mongo query to retrieve the most recent shipped order from the orders collection.

ANS:db.orders.find({ status: "shipped" }).sort({ order_date: -1 }).limit(1)


10. Write Mongo query to get the total revenue from all orders

ANS:db.orders.aggregate([
    { $group: { _id: null, totalRevenue: { $sum: "$total" } } }
])


11. Write Mongo query to retrieve all the orders that shipped before 2022-05-26

ANS:db.orders.find({ ship_date: { $lt: "2022-05-26" } })


12. Write Mongo query to find the maximum price as maxPrice of products and their names as name for each category.

ANS:db.products.aggregate([
    { $group: { _id: "$category_id", maxPrice: { $max: "$price" }, name: { $first: "$name" } } }
])


13. Write Mongo query to find Most used payment Method as paymentMethod and the number of time it is used as count.

ANS:db.payments.aggregate([
    { $group: { _id: "$paymentMethod", count: { $sum: 1 } } },
    { $sort: { count: -1 } },
    { $limit: 1 }
])


14. Write Mongo query to find the total count of orders by status.

ANS:db.orders.aggregate([
    { $group: { _id: "$status", count: { $sum: 1 } } }
])


15. Write Mongo query to retrieve the orders grouped by customer_id with the max total

ANS:db.orders.aggregate([
    { $group: { _id: "$customer_id", maxTotal: { $max: "$total" } } }
])


16. Write Mongo query to retrieve the orders grouped by customer_id with the average total.

ANS:db.orders.aggregate([
    { $group: { _id: "$customer_id", avgTotal: { $avg: "$total" } } }
])

